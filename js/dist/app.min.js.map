{"version":3,"sources":["app.js"],"names":["navList","document","getElementById","sections","i","length","navItems","sec","getAttribute","push","navBar","newLinks","createElement","setAttribute","classList","add","textContent","newList","appendChild","isInViewport","element","position","getBoundingClientRect","top","bottom","classActive","addEventListener","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","section","value","id","querySelector","remove","err","scrollSmoothly","e","target","contains","preventDefault","targetId","hash","scrollIntoView","inline","block","behavior","scrollBtnUP","scrollUp","window"],"mappings":"aA4BI,IAbJ,IAAMA,QAAUC,SAASC,eAAe,gBAAlCF,SAAUC,SAASC,iBAAe,WAClCC,SAAWF,GAYJG,EAAGD,EAAAA,EAAQA,SAApBE,OAAAD,IAAA,CACAE,IAAQC,IAAMA,SAAIC,GACrBF,SAAAG,KAAAF,IAAAC,aAAA,OAYO,IAAAE,OAAa,WACb,IAAMC,IAAAA,EAAQ,EAAGV,GAAAA,SAASW,OAAcR,IAAxC,CACAO,IAASE,EAAAA,SAATD,cAAA,MACSE,EAAUC,SAAnBH,cAAA,KACAD,EAASE,aAAa,QAAtB,cACAF,EAASK,UAATD,IAAAJ,UAAAA,OAAAP,IACAa,EAAQC,aAAYP,OAApBM,WAAAA,OAAAb,IACAJ,EAAQkB,YAARlB,WAAAA,OAAAI,GACHa,EAAAC,YAAAP,GAELX,QAAAkB,YAAAD,KAIAP,SAII,IAAAS,aAAQ,SAAAC,GAFZ,IAAAC,EAAAD,EAAAE,wBAEI,OAAQD,EAASE,KAAO,KAA0B,KAAnBF,EAASG,QAIEC,YAAA,WAAAxB,SAAAyB,iBAAA,SAAA,WAAA,IAAAC,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAAA,IAAA,IAAAC,EAAAC,EAAA7B,SAAA8B,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAAA,CAAA,IAAAU,EAAAN,EAAAO,MAElC,GAAInB,aAAakB,GAAU,CAD/B,IAAAE,EAAsBpC,EAAtBK,aAAA,MAAW6B,SAAqBG,cAArBH,IAAAA,OAAqBE,IAAAzB,UAAAC,IAAA,UAKxBsB,EAAQvB,UAAUC,IAAI,yBAJtBI,CAEQ,IAAGkB,EAAQ7B,EAAAA,aAAnB,MACAP,SAASuC,cAATvC,IAAAA,OAAAsC,IAAiCzB,UAAUC,OAAI,UAC/CsB,EAAQvB,UAAc2B,OAAA,uBANQ,MAAAC,GAAAd,GAAA,EAAAC,EAAAa,EAAA,QAAA,IAAAf,GAAA,MAAAK,EAAA,QAAAA,EAAA,SAAA,QAAA,GAAAJ,EAAA,MAAAC,OAW9BQ,cAX8B,IAAAM,eAAA,WAAA1C,SAAAyB,iBAAA,QAAA,SAAAkB,GAAA,IAAAC,EAAAD,EAAAC,OAAA,GAAAA,EAAA/B,UAAAgC,SAAA,cAAA,CAAAF,EAAAG,iBAAA,IAAAC,EAAAH,EAAAI,KAAAhD,SAAAuC,cAAAQ,GAAAE,eAAA,CAAAC,OAAA,UAAAC,MAAA,QAAAC,SAAA,eAoC9CV,iBAbQ,IAAAW,YAAgBrD,SAAhBuC,cAAA,cAkCR,SAASe,WAfStD,IAAdqD,OAAAA,QAAuBd,YAAT1B,UAAuBC,IAAzC,UACwBuC,YAAUxC,UAAI2B,OAAA,UAnB9Be,OAAA9B,iBAAYZ,SAAP,WAEL8B,aAIIQ,YAAK1B,iBAFuC,QAAA,WAG5C2B,OAAAA,SAAU,CAHd9B,IAAA,EANJ8B,SAAA,aAgCJE","file":"app.min.js","sourcesContent":["/**\n * \n * Manipulating the DOM exercise.\n * Exercise programmatically builds navigation,\n * scrolls to anchors from navigation,\n * and highlights section in viewport upon scrolling.\n * \n * Dependencies: None\n * \n * JS Version: ES2015/ES6\n * \n * JS Standard: ESlint\n * \n*/ \n\nconst navList = document.getElementById('navbar__list');\nconst sections = document.querySelectorAll('section');\nconst navItems = [];\n\n\n/**\n * End Global Variables\n * Start Helper Functions\n * \n*/\n\n//Extract section ids as navigation items.\nfor (let i = 0; i < sections.length; i++) {\n    const sec = sections[i];\n    navItems.push(sec.getAttribute('id'));\n}\n\n\n/**\n * End Helper Functions\n * Begin Main Functions\n * \n*/\n\n// build the nav\nconst navBar = () => {\n    for (let i = 1; i <= navItems.length; i++) {\n        const newList = document.createElement('li');\n        const newLinks = document.createElement('a');\n        newLinks.setAttribute('class', 'menu__link');\n        newLinks.classList.add(`section${i}`);\n        newLinks.setAttribute('href', `#section${i}`);\n        newLinks.textContent = `Section ${i}`;\n        newList.appendChild(newLinks);\n        navList.appendChild(newList);\n    }\n};\n// Build menu \nnavBar();\n\n// Scroll to section on link click\n// to Add Active to items in class \n// Add class 'active' to section when near top of viewport\nconst isInViewport = element => {\n    const position = element.getBoundingClientRect();\n    return (position.top <= 150 && position.bottom >= 150) ? true : false;\n};\n\nconst classActive = () => {\n    document.addEventListener('scroll', () => {\n        for (const section of sections) {\n            if (isInViewport(section)) {\n                // To Add Active to items in class After  going to the Sections directly\n                const id = section.getAttribute('id');\n                document.querySelector(`.${id}`).classList.add('active');\n                section.classList.add('your-active-class');\n            } else {\n                // To Delete Active to items in class After  going from the Sections directly\n                const id = section.getAttribute('id');\n                document.querySelector(`.${id}`).classList.remove('active');\n                section.classList.remove('your-active-class');\n            }\n        }\n    });\n};\n// Set sections as active\nclassActive();\n\n\n// Scroll to anchor ID using scrollTO event\nconst scrollSmoothly = () => {\n    document.addEventListener('click', e => {\n        const target = e.target;\n        if (!target.classList.contains('menu__link'))\n            return;\n        e.preventDefault();\n        const targetId = target.hash;\n        document.querySelector(targetId).scrollIntoView({\n            inline: 'nearest',\n            block: 'start',\n            behavior: 'smooth',\n        });\n    });\n};\n// Scroll to section on link click\nscrollSmoothly();\n\n\n\n// Clicking on the icon the document will scroll to the top smoothly\n// Scroll up \nlet scrollBtnUP = document.querySelector(\".scrollBtn\");\nwindow.addEventListener(\"scroll\", ()=>{\n    scrollUp()\n})\n// Scroll to anchor ID using scrollTO event\n// It moves smoothly by just clicking on it\nscrollBtnUP.addEventListener('click', ()=>{\n    window.scrollTo({\n        top : 0 ,\n        behavior : \"smooth\"\n    })\n})\nscrollUp()\n// It becomes active when it reaches the bottom\n// Its activity ends when it returns to the top\nfunction scrollUp(){\n    window.scrollY > 100 ?  scrollBtnUP.classList.add('active') :\n                            scrollBtnUP.classList.remove('active');\n}\n\n\n/**\n * End Main Functions\n * Begin Events\n * \n*/"]}